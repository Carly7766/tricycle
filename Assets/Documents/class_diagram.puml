@startuml
class MonoBehaviour { }

package Input {
    class KeyInputProvider {
    }
    
    interface IInputProvider {
        GetFrontWheelAxis() : IReadonlyReactiveProperty<float>
        GetFrontWheelJump() : IObservable<Unit>
        GetBackWheelAxis() : IReadonlyReactiveProperty<float>
        GetRearWheelJump() : IObservable<Unit>
    }

    KeyInputProvider ..|> IInputProvider
}
package PlayerTricycle {
    class TricycleStatus <<ScriptableObject>> {
        RotateSpeed : float
    }
    
    class WheelRotatePresenter <<IInitializable>> {
        +canInput : bool
        RegisterRotate() : void
    }
    
    class WheelCalculator {
        tricycleStatus : TricycleStatus
        Calculate() : float
    }
    
    interface IWheelRotatable {
        Rotate(axis : float) : void
    }
    
    interface IWheelJumpable {
        Jump(power : float) : void
    }
    
    class WheelBehaviour {
        Rotate(axis : float) : void
    }
    
    class TricycleBehaviour {
        FrontWheel : WheelBehaviour
        RearWheel : WheelRotatable
    }
    
    TricycleBehaviour --|> MonoBehaviour
    WheelBehaviour --|> MonoBehaviour

    WheelBehaviour ..|> IWheelRotatable
    WheelBehaviour ..|> IWheelJumpable
    
    WheelRotatePresenter ..> IInputProvider
    WheelRotatePresenter ..> TricycleBehaviour
    WheelRotatePresenter ..left> WheelCalculator
    
    TricycleBehaviour ..> WheelBehaviour
}
@enduml
